~~~~~~~~~~~~~~~~~~~~~
CMP MIPS Simulator
~~~~~~~~~~~~~~~~~~~~~

AUTHOR
======
	
	1.
	
	NTHU 
	Department of Mathematics
	Department of Computer Science
	Ph.D. Student
	Name: Yu Hsiang, Cheng
	Nickname: Slighten
	E-mail: slightencheng@gmail.com

	2.
	Harbin Institute of Technology
	Department of Computer Science
	Student ID: 		x1022108
	Name: 				S.Jie Cao
	E-mail: 			caoshijie0501@gmail.com
	FB: 				https://www.facebook.com/profile.php?id=100007780840056
	Cellphone number:	0979480528
	
INTRODUCTION
============
		This CMP(cache, memory, PTE) MIPS simulator is a single cycle simulator with virtual memory 
	implementation, which has both I(instruction) & D(data) TLB(Table Lookaside Buffer), PTE(Page Table Entry), hard drive, memory and L1 cache. Every address number is virtual, need to check out TLB to see if data in memory or hard drive. If TLB misses, check out PTE and do same thing, and so forth. 
	(Note that this project actually virtual address equal to physical address, no need to translation.)

	 	This CMP MIPS simulator inputs "dimage.bin" and "iimage.bin" and outputs "snapshot.rpt" and 
	"report.rpt" where "dimage.bin" is the binary code of data of 1KB in little-endian,  "iimage.bin" is the binary code of instructions of 1KB in little-endian, "snapshot.rpt" is the result of simulation, and "report.rpt" enumerate the numbers of ICache, DCache, ITLB, DTLB, IPTE, DPTE hits and misses.

	 	This CMP MIPS simulator is a simpler version than the real one.
	We simulate some MIPS instructions (all 32-bit) on this simulator including following opcodes:
	 1. R-type: 
	 	"add", "sub", "and", "or", "xor", "nor", "nand", "slt",
		"sll", "srl", "sra", "jr".
	 2. I-type: 
	 	"addi", "lw", "lh", "lhu", "lb", "lbu", "sw", "sh",
		"sb", "lui", "andi", "ori", "nori", "slti", "beq", "bne".
	 3. J-type:
	 	"j", "jal".
	 4. S-type:
	 	"halt".
	 Note that we don't simulate ALL MIPS instructions, just all above.
	 (No floating point instructions, no "sltiu", and so on.)

	 	Note that this simulator supposed not to handle error. 
	 If any error occurs, it will be printed on screen,
	 but the number of hits and misses may be wrong.

USING METHOD
============

	 	Untar the "archi01.tar.gz" in your environment, make, and then 
	execute.
	 	If you are in Unix or Cygwin this kind of Unix like environment
	in Windows, type the following commands:

	% tar zxvf archi01.tar.gz
	% cd archi01/simulator
	% make
	% ./CMP
	(or "%./CMP.exe" in some environments)

	and it will generate "snapshot.rpt" and  "report.rpt".
	Note that you should have the "dimage.bin" and "iimage.bin" in the same directory as your "CMP".

		There are some test cases in the folder "open_testcase" tou can try.
	 	You can type "diff snapshot.rpt ~/open_testcase/exampleX/snapshot.rpt" and 
	"diff report.rpt ~/open_testcase/exampleX/report.rpt" to see if they are identical. (where 'X' is the number between 1~3) 
	
	Note: If you want to see every words in hex IR, I have put the testing "fprintf" or "printf" in some the functions in .c file, you can use it just by deleting the comment notation "/*" "*/", and then you can compare it if it's your ideal result.

INPUT FORMAT
============
	 	As I said, your "dimage.bin" and "iimage.bin" are the binary code 
	of data and instructions of 1KB in little-endian.
	 	The format of "dimage.bin" should be the order of following:

				the starting address of $sp (4 Bytes) --> 
				the amount of words of following data (4 Bytes) --> 
				the body of data (n bytes)
	 
	 The format of "iimage.bin" should be the order of following:

				the starting address of PC (4 Bytes) --> 
				the amount of words of following instructions (4 Bytes) --> 
				the body of instructions (n bytes)

OUTPUT FORMAT
============
	
	snapshot.rpt:

		Show the state of registers after last cycle be done of every cycle.

	e.g.
					cycle 44
					$00: 0x00000000
					$01: 0x00000400
					$02: 0xFFFFABCD
					$03: 0xCDCDABCD
					$04: 0xCD000000
					$05: 0xCD00ABCD
					$06: 0xFFFFABCD
					$07: 0x0000ABCD
					$08: 0xABCD0000
					$09: 0x00CD0000
					$10: 0xFFFF8000
					$11: 0x00000000
					$12: 0x00000000
					$13: 0x00000000
					$14: 0x000000CD
					$15: 0xFFFFFFCD
					$16: 0x00000000
					$17: 0x00000000
					$18: 0x00000000
					$19: 0x00000000
					$20: 0x00000000
					$21: 0x00000000
					$22: 0x00000000
					$23: 0x00000000
					$24: 0x00000000
					$25: 0x00000000
					$26: 0x00000000
					$27: 0x00000000
					$28: 0x00000000
					$29: 0x00000000
					$30: 0x00000000
					$31: 0x00000000
					PC: 0x000000A8

	report.rpt:

		Enumerate the numbers of ICache, DCache, ITLB, DTLB, IPTE, DPTE hits and misses.

	e.g.
					ICache :
					# hits: 21
					# misses: 25

					DCache :
					# hits: 2
					# misses: 10

					ITLB :
					# hits: 38
					# misses: 8

					DTLB :
					# hits: 10
					# misses: 2

					IPageTable :
					# hits: 0
					# misses: 8

					DPageTable :
					# hits: 0
					# misses: 2
	 

BUGS
====
		
	 	I have checked it detailedly, so it should have had bare bugs. 
	However, if you find some bugs, then I sincerely hope you can contact me by FB ,or e-mail me, or call me directly. Thanks for you help!

COPYRIGHT
=========
	
	Copyright (C) 2014 by Slighten. All rights reserved.

FAQs
====

	Q: What is this software used for?
	 A: A MIPS simulator which simulates the MIPS format machine codes and shoe its result.
	
	Q: What is MIPS and what is machine language?
	 A: Look it up in your textbook or google it.
	
	Q: Why can't I "make"?
	 A: You should have some related compiler tools in your system first, like gcc. (GNU C compiler). Also, you should have had "make" utility in your environment.
	
	Q: Why I typed "./a.out" or "./a.exe" but it shows me an error?
	 A: We generate the executable file that names "CMP", so you should key in "CMP" instead of "./a.out" or "./a.exe".
	
	Q: Why I typed "CMP" but still have error?
	 A: You may try to type "./CMP".
	
	Q: Why I typed "cat" to see "dimage.bin" and "iimage.bin" but what I see is a garbled text?
	 A: It's normal, since ".bin" file contains binary data, 
	 and you should type "xxd image.bin" or "hexdump image.bin" or "vim â€“b image.bin" and in Vim, type ":%!xxd". (if you haven't had "xxd" or "hexdump" utility or "Vim editor" yet, please install them first)
	
	Q: How do I verify if the result is correct?
	 A: Do "diff" with the result from the correct one.
	
	Q: Ok, I do it right, and then?
	 A: Congratulations! You made it. If you like it, sincerely please to donate or I won't have enough money to rent a small little room for myself to live in next semester. ~TAT~ 
	
	If you have other problems, just contact me ASAP and I will answer you.^^

THANKS
======
	
	1. The respectable professor Pai H. Chou & Ren-Song Tsay
	2. Teammates, and great TAs
	3. The books 
	 (1) /Introduction to computing systems - from bits & gates to C & beyond (2E)/ by Yale N. Patt and Sanjay J. Patel 
	 (2) /Computer Organization and Design - The hardware/software interface/ by David A. Patterson & John L. Hennessy 
	4. Google
	
CHANGELOG
=========

	None

TODO
====

	Simplify this code.
