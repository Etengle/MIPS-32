~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Simple MIPS Assembler Complete + Random Don't Care
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

AUTHOR
======
	
	NTHU 
	Department of Mathematics
	Department of Computer Science
	Ph.D. Student
	Name: Yu Hsiang, Cheng
	Nickname: Slighten
	E-mail: slightencheng@gmail.com

INTRODUCTION
============

		This simple MIPS assembler is writen by C language and is a simpler 
	version than the real one.
		I translate some MIPS instructions (all 32-bit) on this assembler 
	including following opcodes:
	 1. R-type: 
	 	"add", "sub", "and", "or", "xor", "nor", "nand", "slt",
		"sll", "srl", "sra", "jr".
	 2. I-type: 
	 	"addi", "lw", "lh", "lhu", "lb", "lbu", "sw", "sh",
		"sb", "lui", "andi", "ori", "nori", "slti", "beq", "bne".
	 3. J-type:
	 	"j", "jal".
	 4. S-type:
	 	"halt".
	 	
	 	Note that I don't translate ALL MIPS instructions, just all above.
	(No floating point instructions, no "sltiu", and so on.)
	
	(New features!)
		This simple MIPS assembler is a simpler version than the real one.
	I realized many many functions on this assembler including following:
	  1. case insensitive opcodes, directives, and case sensitive labels.
	  2. allow flexible spacing (tab, whitespace, ALSO newline!!) 
	  3. handles some syntax errors by giving informative error messages.
	  4. sensor 0x( + hex), decimal numbers. 
	  5. endian transformation.
	  6. labels don't have to be at the most left side in a line.
	  7. one line can contain two or more IR, and EVEN SPLIT!
	  8. Don't care field will be filled with random number! 

	  
	Error tests including following:
	  1. unknown instruction opcode or operand format
	  2. not found .ORG first (warning)
	  3. double .ORG (warning)
	  4. some format tests after opcodes (such as registers, n-bits numbers, etc.)
	  5. if input file is an ".S" file
	 (New features!)
	  6. undefined labels
	  7. redefined labels

	 There are some testcases you can test.
	 
USING METHOD
============

		Untar the "MIPS32_asem.tar.gz" in your environment, make, and then 
	execute.
		If you are in Unix or Cygwin this kind of Unix like environment
	in Windows, type the following commands:

	% tar zxvf MIPS32_asem.tar.gz
	% cd archi01/simulator
	% make
	% ./asem filename.S [(Optional)endian transformation: l/b]
	(or "%./asem.exe" in some environments like Windows)

		and it will generate "iimage.bin" and  "error_dump.rpt".
	Note that you should have the "filename.S" in the same directory as 
	your "asem".

INPUT FORMAT
=============

		The input file name must be end with ".S".
	 The content of you input file is like this: 

	 						.ORG  0x204
	 						j main
	 					ABC:
	 						addi $10, $10, 7  
	 					main:	
						   	and  $10, $11, $10
							sll  $11, $11, 1 
							bne  $0 , $10, ABC    
							addi $10, $10, 7     	# 0x00000007
							lui  $11, -32768		# 0xFFFF8000
							.
							.
							.

		where ".ORG" set the PC to "0x204" and put the content below the 
	address, and note that the address and content shouldn't exceed 1KByte.(0 ~ 0x400)

		If without ".ORG", it will warn you and PC will default to 0.


OUTPUT FORMAT
=============
		
		The first output file "filename.sym" is the symbol table of this 
	assembly code.
	The content of "filename.sym" is like following:

				// Symbol table for "fib_dp.S"
				// Scope level 0:
				//      Symbol table       Page Address (decimal)
				//      -----------------  ----------------------
				//      else               0032
				//      loop               0044
				//      end                0072

		The second output file "iimage.bin" is the binary format of 
	instructions of 1KB.
	The content of "iimage.bin" is the order of following:

				the starting address of PC (4 Bytes) --> 
		the amount of words of following instructions (4 Bytes) --> 
				the body of instructions (n bytes)

BUGS
====

		I have done many test cases. If there are still some other bugs you 
	find , then I sincerely hope you can contact me by FB ,or e-mail me, or call me directly. Thanks for you help!

COPYRIGHT
=========
	
	Copyright (C) 2014 by Slighten. All rights reserved.

FAQs
====

	Q: What is this software used for?
	 A: A MIPS assembler which translates MIPS assembly language to machine language.
	
	Q: What is MIPS and what is machine language?
	 A: Look it up in your textbook or google it.
	
	Q: Why can't I "make"?
	 A: You should have some related compiler tools in your system first, like gcc. (GNU 	C compiler). Also, you should have had "make" utility in your environment.
	
	Q: Why I typed "./a.out" or "./a.exe" but it shows me an error?
	 A: We generate the executable file that names "asem", so you should key in 
	 	"asem" instead of "./a.out" or "./a.exe".
	
	Q: Why I typed "asem" but still have error?
	 A: You may try to type "./asem filename.S" as I said.
	
	Q: Why I call "cat" to see "iimage.bin" but what I see is a garbled text?
	 A: It's normal, since ".bin" file contains binary data, 
	 	and you should type "xxd image.bin" or "hexdump image.bin" or "vim â€“b image.bin" and in Vim, type ":%!xxd". (if you haven't had "xxd" or "hexdump" utility or "Vim editor" yet, please install them first)
	
	Q: How do I verify if the result is correct?
	 A: Do "diff" with the result from the real MIPS assembler or you can
	 	use my disassembler to disassemble it again back to your assembly language.
	
	Q: Ok, I do it right, and then?
	 A: You can use my MIPS simulator to simulate it.

	 Congratulations! You made it. If you like it, sincerely please to donate or I won't
	have enough money to rent a small little room for myself to live in next semester. ~TAT~ 
	
	If you have other problems, just contact me ASAP and I will answer you.^^

THANKS
======
	
	1. The respectable professor Pai H. Chou & Ren-Song Tsay
	2. Teammates, and great TAs
	3. The books 
	 (1) /Introduction to computing systems - from bits & gates to C & beyond (2E)/ by Yale N. Patt and Sanjay J. Patel 
	 (2) /Computer Organization and Design - The hardware/software interface/ by David A. Patterson & John L. Hennessy 
	4. Google search engine
	
CHANGELOG
=========

	Add Label, pass 2, RDC. 

TODO
====

	Make a single cycle simulator with virtual memory implementation.

OTHER WORKS
===========
	
	LC3 disassembler, LC3 assembler, MIPS disassembler, 
	MIPS single cycle simulator, MIPS pipelined simulator
	(This two is my projects from my computer architecture class,
	Due to this, I can only put the object file but not source code.)


